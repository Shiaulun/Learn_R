if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
}return(BMI)}
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
}}return(BMI)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %d" % "BMI")
}}
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %d"% (BMI))
}}
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %d",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
p
BMI_cal(183,72.5)
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %s",BMI)
}}
BMI_cal(183,72.5)
}
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprint("You BMI is %s",BMI)
}}
BMI_cal(183,72.5)
}
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprint("You BMI is %s",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %s",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
print("You BMI is %d",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprintf("You BMI is %d",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprintf("You BMI is %a",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprintf("You BMI is %s",BMI)
}}
BMI_cal(183,72.5)
BMI_cal = function( height , weight){
BMI = weight / (height / 100)^2
if(BMI<18.5){
print("Your are too thin!!")
}
if(BMI>24){
print("You are too fat!!!")
}
else{
print("You are good look body!!")
sprintf("You BMI is %.2f",BMI)
}}
BMI_cal(183,72.5)
seq(from=1,to=20)
1:20
(1:20,2)
1:20,2
seq(1,20,2)
seq(1,20,by=2)
seq(1,20,length=2)
seq(1,20,length=3) # 此為
rep(1,times=5)
rep(c(1,2),times=5)
rep(c(1,2),each=5)
rep_len(c(1,2),t)
rep_len(c(1,2),5)
rep(c(1,2),length,out=5)
rep(c(1,2),length,out=5)
rep(c(1,2),length(),out=5)
rep(c(1,2),length(5),out=5)
rep(c(1,2),out=5)
rep(c(1,2))
rep(c(1,2),c(1,2))
paste("the","big","bang","theory")
paste("big","bang",sep="-")
length(paste("the","big","bang","theory"))
paste(c("big","bang","theory"))
paste(c("big","bang","theory"),1:2)
paste(c("big","bang","theory"),1:3)
length(paste(c("big","bang"),1:2))
matrix( 1:9 , byrow = TRUE , nrow = 3 )
matrix(1:9,byrow=TRUE,nrow=3)
matrix( 1 : 9 , byrow = TRUE , nrow = 3)
matrix( 1:9 , nrow = 3 )
matrix( 1:9 , nrow = 2 ) # 預設為以col排列 共有3個row的matrix
matrix( 1:10 , nrow = 2 ) # 預設為以col排列 共有3個row的matrix
matrix( 1:9 , nrow = 3 ) # 預設為以col排列 共有3個row的matrix
kevin = c( 85 , 73 )
marry = c( 72 , 64 )
jerry = c( 59 , 66 )
mat1 = matrix ( c( kevin , marry , jerry ) , nrow = 3 , byrow = TRUE )
mat1
colnames(mat1) = c( "first" , "second" ) # 替mat1內的col命名
rownames(mat1) = c( "kevin" , "marry" , "jerry" )
mat1
dim(mat1)
nrow(mat1)
ncol(mat1)
t(mat1) # 矩陣轉置(transpose)
mat1[ 1 , ]
mat1[ , 1 ] # 取第一行 取出mat1矩陣中第一個col的全部資料，意即取第一個col，取全部row
mat1[ 1:2 , ] # 取第一列及第二列中全部資料
mat1[ c( "kevin" , "jerry") , ]
mat1[ c( "kevin" , " jerry ") , "first"]
mat1[ c( "kevin" , " jerry "), "first"]
mat1[ c( "kevin" , "jerry"), "first" ]
mat2 = rbind( mat1 , c( 78 , 63 ) )
mat2
rownames(mat2)[nrow(mat2)] = "sam"  # 新增一個rowname新增在最後一列
mat2
mat3 = cbind( mat2 , c( 82 , 77 , 70 , 64 ) )
mat3
rowSums(mat3)
colSums(mat3) # 計算出每一個col各別的總和
mat3
colnames(mat3)[ncol(mat3)] = "third"  # 替最後一行新增一個colname third
mat3
rowSums(mat3) # 計算出每一個row各別的總和
colSums(mat3) # 計算出每一個col各別的總和
rowMeans(mat3) # 計算出每一個row各別的平均
colMeans(mat3) # 計算出每一個col各別的平均
m1 = matrix( 1:4 , byrow = TRUE , nrow = 2 )
m1
m2 = matrix( 5:8 , byrow = TRUE , nrow = 2 )
m1 + m2
m1 %*% m2
m1 - m2
m1 * m2
mat3
mat2
mat1
mat1
mat4 = matrix( c( 0.4 , 0.6) , ncol = 1)
mat4
mat1 %*% mat4
85*0.4+77*0.3
85*0.4+77*0.6
mat4 = matrix( c( 0.4 , 0.6) , byrow = TRUE , nrow = 1)
mat4
mat1 %*% mat4
mat4 = matrix( c( 0.4 , 0.6) , nrow = 1)
mat4
mat1 %*% mat4
mat4 = matrix( c( 0.4 , 0.6) , ncol = 1)
mat4
mat1 %*% mat4
85*0.4
77*0.6
mat1
72*0.4+64*0.6
59*0.4+66*0.6
85*0.4+73*0.6
add_weight = mat1 %*% mat4
add_weight
weather = c( "sunny" , "rainy" , "cloudy" , "rainy" , "cloudy" )
weather_category = factor(weather)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
weather_category
typeof(weather_category)
class(weather_category)
temperature = c( "Low" , "High" , "High" ," Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
temperature = c( "Low" , "High" , "High" ," Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
temperature = c( "Low" , "High" , " Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
temperature = c( "Low" , "High" , "High" ," Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
weather = c( "sunny" , "rainy" , "cloudy" , "rainy" , "cloudy" )
weather_category = factor(weather) # 將資料轉換為類別資料
class(weather_category)
weather_category # Levels類似於set的概念，按照編碼表內字母順序排序，重覆的只會顯示一次
temperature = c( "Low" , "High" , "High" ," Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
temperature_category[3] > temperature_category[1]
temperature_category[4] > temperature_category[1]
temperature = c( "Low" , "High" , "High" , "Medium" , "Low" , "Medium" )
temperature_category = factor( temperature , order = TRUE , levels = c( "Low" , "Medium" , "High" ) )
temperature_category
temperature_category[3] > temperature_category[1]
temperature_category[4] > temperature_category[1]
temperature_category[4] > temperature_category[3]
levels(temperature_category)
weather = c( "s" , "r" , "c" , "r" , "c" )
weather_factor = factor(weather)
levels(weather_factor) = c( "cloudy" , "rainy" , "sunny" )
weather_factor
days <- c( "mon" , "tue" , "wed" , "thu" , "fri")
days <- c( "mon" , "tue" , "wed" , "thu" , "fri" )
temp <- c( "22.2" , "21" , "23" , "24.3" , "25" )
rain <- c( TRUE , TRUE , FALSE , FALSE , TRUE )
df <- data.frame( days , temp , rain )
df
class(df)
str(df) # 檢視架構
summary(df) # 檢視資料摘要
data()
data(iris)
class(iris) # 觀察讀取到的資料集型態
head(iris)
head( iris , 10 )
tail(iris)
tail( iris , 10 )
iris[ 1:3 , ] # 取前3列資料
iris[ 1:3 , 1] # 取前3列第一行資料
iris[ 1:3 , "Sepal.Length" ] # 利用name的方式取前3列的Speal.Length資料
iris$Sepal.Length[1:3]
iris$"Sepal.Length"[1:3]
setosa.data = iris[ iris$Species == "setosa" , 1:5 ]
head(setosa.data)
flower.type = data.frame(Species = "setosa" , Flower = "iris")
flower.type
merge( flower.type , iris[1:3] , by = "Species" ) # 利用 Species = "setosa" 將2個不同的dataframe merge起來
merge( flower.type , iris[1:3,] , by = "Species" ) # 利用 Species = "setosa" 將2個不同的dataframe merge起來
iris[ order( iris$Sepal.Length , decreasing = TRUE) , ][1:5]
iris[ order( iris$Sepal.Length , decreasing = TRUE) , ][1:2]
iris[ order( iris$Sepal.Length , decreasing = TRUE) , ][1:5]
head(iris[ order( iris$Sepal.Length , decreasing = TRUE) , ][1:5])
data = read.csv( "C:/Users/Java/Desktop/R/riii-master/data/2330.csv", header = TRUE )
data
head(data)
data$Date = factor(data$Date)
head(data)
iris$Species_new = ifelse(iris$Species %in% c("setosa"), "IsSetosa","Notsetosa")
class(data$Date)
data$Date
data$Date = factor(data$Date , decreasing = TRUE)
data$Date = factor(order(data$Date , decreasing = TRUE))
data$Date
head(data)
data$High = factor( data$High )
data$Date = as.Date( data$Date ) # 日期需要有階層概念才可以排序
head(data)
data = read.csv( "C:/Users/Java/Desktop/R/riii-master/data/2330.csv", header = TRUE )
head(data)
data$Date = as.Date( data$Date ) # 日期需要有階層概念才可以排序
data[data$Date > 2014-03-01 & data$Date < 2014-08-31]
data[data$Date > 2014-03-01 && data$Date < 2014-08-31]
data[data$Date > 2014-03-01 && data$Date < 2014-08-31 , [,]]
data[data$Date > 2014-03-01 && data$Date < 2014-08-31 , ][,7]
data[data$Date > 2014-03-01 && data$Date < 2014-08-31 , ][1,]
data[data$Date,data$Date > 2014-03-01 && data$Date < 2014-08-31 , ][,]
data[data$Date,data$Date > 2014-03-01 && data$Date < 2014-08-31 , ][:]
data[data$Date,data$Date > 2014-03-01 && data$Date < 2014-08-31 , ][1:]
data[data$Date,data$Date > 2014-03-01 && data$Date < 2014-08-31 , [1:]]
data[data$Date,data$Date > 2014-03-01 && data$Date < 2014-08-31 , ]
data[data$Date = data$Date > 2014-03-01 && data$Date < 2014-08-31 , ]
data[data$Date > 2014-03-01 ,1: ]
data[data$Date > 2014-03-01 , [1:]]
data[data$Date > 2014-03-01 ]
data[data$Date > 2014-03-01 ,]
data[data$Date > 2014-03-01 && data$Date <2014-08-31,]
data[data$Date > 2014-03-01 & data$Date <2014-08-31,]
data[data$Date > 2014-03-01 ]
data[data[data$Date > 2014-03-01] && data[data$Date < 2014-08-31],]
data$Date = as.Date( data$Date ) # 日期需要有階層概念才可以比較
data
data = read.csv( "C:/Users/Java/Desktop/R/riii-master/data/2330.csv", header = TRUE )
head(data)
data$Date = as.Date( data$Date ) # 日期需要有階層概念才可以比較
data
data = read.csv( "C:/Users/Java/Desktop/R/riii-master/data/2330.csv", header = TRUE )
head(data)
tail(data)
data$Date = as.Date( data$Date ) # 日期需要有階層概念才可以比較
data$Date > "2014-03-01"
data$Date > "2014-03-01" & data$Date <"2014-08-31"
data[data$Date > "2014-03-01" & data$Date <"2014-08-31"]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31"][1,]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31"][,1:]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31",1:]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31",[,1:8]]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31",1:8]]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31",1:8]
data[data$Date > "2014-03-01" & data$Date <"2014-08-31",]
date = data[data$Date > "2014-03-01" & data$Date <"2014-08-31",]
date[order(date$Close),1]
date[order(date$Close),[1,1])]
date[order(date$Close),1,1]
date[order(date$Close),2]
date[order(date$Close),decreasing = TRUE]
date[order(date$Close,decreasing = TRUE)]
date[order(date$Close,decreasing = TRUE)[1:7]]
date[order(date$Close,decreasing = TRUE),[1:7]]
date[ order( date$Date , decreasing = TRUE) , ][1:5]
date[ order( date$Close , decreasing = TRUE) , ][1:5]
date[ order( date$Close , decreasing = TRUE) , ][1:1]
date[ order( date$Close , decreasing = TRUE) , ][1:5]
date[ order( date$Close , decreasing = TRUE) , ][1:]
date[ order( date$Close , decreasing = TRUE) , ][1:9]
date[ order( date$Close , decreasing = TRUE) , ][1:5]
date[ order( date$Close , decreasing = TRUE) , ][1:7]
date[ order( date$Close , decreasing = TRUE) , ][1:7][1,]
item = list( thing = "hat" , size = 8.25 )
item
test = list( name = "Toby" , score = c( 87 , 57 , 72) )
test$name
test$score
flower = list ( title = " iris dataset " , data = iris )
flower$data[ 1:3 , c( "Sepal.Width" , "Sepal.Length") ]
getwd()
setwd("C:/Users/Java/Desktop/R/Learn_R") # 修改所在目錄
test.data = read.table("C:/Users/Java/Desktop/R/riii-master/data/match.txt")
test.data = read.table( "C:/Users/Java/Desktop/R/riii-master/data/match.txt" , header = TRUE , sep = "|" )
test.data
test_data = read.table( "C:/Users/Java/Desktop/R/riii-master/data/match.txt" , header = TRUE , sep = "|" )
test_data
test_data1 = read.csv( "C:/Users/Java/Desktop/R/riii-master/data/2330.csv" , header = TRUE )
test_data1
tail(test_data1)
write.table( test_data , file = "test.txt" , sep = "" )
write.csv( test_data , file = "test.csv" )
save( x = iris , file = 'iris.RData' )
load("iris.RData")
x = 5 ;
if( x > 3 ){
print("x>3")
}else{
print("x<=3")
}
x = 5;
if(x>3){
print("x>3");
}else if (x==3){
print("x==3");
}else{
print("x<3");
}
for(i in 1:10){
print(i);
}
sum = 0;
for(i in 1:1000){
sum = sum + i;
}
sum
sum = 0;
for(i in 1:100){
sum = sum + i;
}
sum
sum = 0
for(i in 1:100){
sum = sum + i;
}
sum
mat = matrix( 1:9 , byrow = TRUE , nrow = 3 )
for(i in seq_len(nrow(mat))){
for(j in seq_len(ncol(mat))){
print(mat[i,j])
}
}
mat
sum = 0 ;
cnt = 0 ;
while(cnt<=100){
sum = sum + cnt ;
cnt = cnt + 1 ;
}
sum
1:9 %t 1:9
1:9 %t (1:9)
1:9 *%t* (1:9)
1:9 *%* t(1:9)
1:9 *%* (1:9)
1:9 * (1:9)
1:9 * t(1:9)
1:9 *%* t(1:9)
1:9 * t(1:9)
1:9 *t (1:9)
1:9 %*% t(1:9)
